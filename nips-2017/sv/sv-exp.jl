using Distributions
using Turing
using HDF5, JLD

TPATH = Pkg.dir("Turing")

include(TPATH*"/example-models/nuts-paper/sv_helper.jl")

y = readsvdata()

# Stochastic volatility (SV)
@model sv_nuts(logy, N, dy) = begin
  τ ~ Exponential(1/100)
  ν ~ Exponential(1/100)
  logs = TArray{Real}(N)
  s1 ~ Exponential(1/100)
  logs[1] = exp(s1)
  for i = 2:N
    logs[i] ~ Normal(logs[i-1], sqrt(1/τ))
    # s[i] = exp(s[i])
    dy = typeof(ν)((logy[i] - logy[i-1]) / exp(logs[i]))
    dy ~ TDist(ν)
  end
end

y = filter!(each -> each > 0.1, y)
N = length(y)
logy = log(y)


chain = sample(sv_nuts(logy, N, NaN), Gibbs(1000,PG(50,1,:logs,:s1),HMC(1,0.02,4,:τ,:ν)))
save(TPATH*"/nips-2017/sv/sv-exps-Gibbs(1000,PG(50,1),HMC(1,0.2,4)))-chain.jld", "chain", chain)

setchunksize(2600)

chain = sample(sv_nuts(logy, N, NaN), NUTS(1000,0.65))
save(TPATH*"/nips-2017/sv/sv-exps-NUTS(1000,0.65)-chain.jld", "chain", chain)


# describe(chain)
# setchunksize(60)

# chain = sample(sv_nuts(y, N, NaN), Gibbs(1000,PG(50,1,:s),NUTS(1,200,0.65,:τ,:ν)))
# save(TPATH*"/nips-2017/sv/sv-exps-Gibbs(1000,PG(50,1),NUTS(1,200,0.65))-chain.jld", "chain", chain)

# chain = sample(sv_nuts(logy, N, NaN), NUTS(1000,200,0.65))
# save(TPATH*"/nips-2017/sv/sv-exps-NUTS(1000,200,0.65)-chain.jld", "chain", chain)
#
# describe(chain)
# using Gadfly
# N=length(logy)
# l1 = layer(x=1:N,y=logy,Geom.point)
# plot(l1)

# [Gibbs] Finished with
#   Running time    = 21.017390220999996;
# Iterations = 1:1000
# Thinning interval = 1
# Chains = 1
# Samples per chain = 1000
#
# Empirical Posterior Estimates:
#               Mean          SD         Naive SE        MCSE         ESS
#        τ   0.011286930  0.010772679 0.00034066203 0.00067193151  257.038059
#        ν   0.052193079  0.022104031 0.00069899083 0.00051979703 1000.000000
# logs[10]  47.714786545 70.134438211 2.21784567162 6.18902720035  128.415623
#  logs[8]  44.756171670 62.902734883 1.98915913283 5.53250985256  129.269082
#  logs[2]  14.585195806 24.229969209 0.76621890338 2.55409755009   89.997566
#  logs[5]  34.519241766 49.822919980 1.57553906817 4.78119209396  108.589034
#  logs[4]  31.060618266 51.368148041 1.62440346994 5.17688892771   98.457799
#  elapsed   0.021017390  0.050636084 0.00160125356 0.00242606538  435.627426
#  logs[7]  41.743589023 57.370023568 1.81419943894 4.93594972255  135.091680
#       lp -57.265254542  6.695628099 0.21173435159 0.75440489441   78.772323
#  logs[3]  22.457098060 36.894046060 1.16669217648 3.57518051275  106.491911
#  logs[6]  38.896064063 53.084548669 1.67868082355 4.78352075921  123.151848
#  logs[9]  45.926484090 66.989886472 2.11840621449 5.73510069935  136.438328
#       s1   0.010025053  0.009802334 0.00030997702 0.00049839864  386.816775
#
# Quantiles:
#                2.5%           25.0%          50.0%         75.0%         97.5%
#        τ   0.00022067177   0.0036831415   0.0081056386   0.015752206   0.039683350
#        ν   0.01867439273   0.0359372409   0.0484220199   0.064942655   0.103602019
# logs[10]  -0.51719301669  15.6464742265  30.5704747607  53.696987125 198.963892760
#  logs[8]  -0.71414766961  15.8369331759  27.7197374802  50.854307891 184.792883861
#  logs[2]  -4.02276861998   3.5128961055   8.6790725104  16.164086287  85.654809657
#  logs[5]  -0.62811740364  11.0563201098  21.6337603069  38.274636030 159.898132149
#  logs[4]  -1.97111395727   8.8995619186  18.4943697503  34.341000050 149.487629833
#  elapsed   0.01733077053   0.0175953023   0.0177744260   0.020066906   0.023503415
#  logs[7]   1.45201734685  14.4335497723  27.2378851971  48.569290155 176.519784337
#       lp -76.40026001692 -59.9537402717 -55.9479019303 -52.675692331 -48.358588214
#  logs[3]  -3.52738773821   5.6010340423  13.5611719804  26.057209794 103.502703016
#  logs[6]   1.28539486997  12.9875834157  25.6202515487  43.938188168 168.713416301
#  logs[9]   0.16248878622  15.5593033137  30.0040397308  52.202572632 174.812836487
#       s1   0.00022641305   0.0028348338   0.0069856208   0.014410239   0.034949876
