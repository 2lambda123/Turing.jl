// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace lr_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
class lr_model : public prob_grad {
private:
    int N;
    vector<double> xs_1;
    vector<double> xs_2;
    vector<int> ts;
public:
    lr_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "lr_model_namespace::lr_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "xs_1", "double", context__.to_vec(N));
        validate_non_negative_index("xs_1", "N", N);
        xs_1 = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("xs_1");
        pos__ = 0;
        size_t xs_1_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < xs_1_limit_0__; ++i_0__) {
            xs_1[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "xs_2", "double", context__.to_vec(N));
        validate_non_negative_index("xs_2", "N", N);
        xs_2 = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("xs_2");
        pos__ = 0;
        size_t xs_2_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < xs_2_limit_0__; ++i_0__) {
            xs_2[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "ts", "int", context__.to_vec(N));
        validate_non_negative_index("ts", "N", N);
        ts = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("ts");
        pos__ = 0;
        size_t ts_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < ts_limit_0__; ++i_0__) {
            ts[i_0__] = vals_i__[pos__++];
        }

        // validate data
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"ts[k0__]",ts[k0__],0);
            check_less_or_equal(function__,"ts[k0__]",ts[k0__],1);
        }

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~lr_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta_0")))
            throw std::runtime_error("variable beta_0 missing");
        vals_r__ = context__.vals_r("beta_0");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_0", "double", context__.to_vec());
        double beta_0(0);
        beta_0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_0: ") + e.what());
        }

        if (!(context__.contains_r("beta_1")))
            throw std::runtime_error("variable beta_1 missing");
        vals_r__ = context__.vals_r("beta_1");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_1", "double", context__.to_vec());
        double beta_1(0);
        beta_1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_1: ") + e.what());
        }

        if (!(context__.contains_r("beta_2")))
            throw std::runtime_error("variable beta_2 missing");
        vals_r__ = context__.vals_r("beta_2");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_2", "double", context__.to_vec());
        double beta_2(0);
        beta_2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_2: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ beta_0;
        (void) beta_0;   // dummy to suppress unused var warning
        if (jacobian__)
            beta_0 = in__.scalar_constrain(lp__);
        else
            beta_0 = in__.scalar_constrain();

        T__ beta_1;
        (void) beta_1;   // dummy to suppress unused var warning
        if (jacobian__)
            beta_1 = in__.scalar_constrain(lp__);
        else
            beta_1 = in__.scalar_constrain();

        T__ beta_2;
        (void) beta_2;   // dummy to suppress unused var warning
        if (jacobian__)
            beta_2 = in__.scalar_constrain(lp__);
        else
            beta_2 = in__.scalar_constrain();


        // transformed parameters
        vector<T__> ys(N);

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(ys,DUMMY_VAR__);

        try {
            current_statement_begin__ = 14;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 15;
                stan::math::assign(get_base1_lhs(ys,i,"ys",1), (1 / (1 + exp(-(((beta_0 + (beta_1 * get_base1(xs_1,i,"xs_1",1))) + (beta_2 * get_base1(xs_2,i,"xs_2",1))))))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < N; ++i0__) {
            if (stan::math::is_uninitialized(ys[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: ys" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"ys[k0__]",ys[k0__],0);
            check_less_or_equal(function__,"ys[k0__]",ys[k0__],1);
        }

        // model body
        try {
            current_statement_begin__ = 18;
            lp_accum__.add(normal_log<propto__>(beta_0, 0, 2));
            current_statement_begin__ = 19;
            lp_accum__.add(normal_log<propto__>(beta_1, 0, 2));
            current_statement_begin__ = 20;
            lp_accum__.add(normal_log<propto__>(beta_2, 0, 2));
            current_statement_begin__ = 21;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 22;
                lp_accum__.add(bernoulli_log<propto__>(get_base1(ts,i,"ts",1), get_base1(ys,i,"ys",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_0");
        names__.push_back("beta_1");
        names__.push_back("beta_2");
        names__.push_back("ys");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "lr_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double beta_0 = in__.scalar_constrain();
        double beta_1 = in__.scalar_constrain();
        double beta_2 = in__.scalar_constrain();
        vars__.push_back(beta_0);
        vars__.push_back(beta_1);
        vars__.push_back(beta_2);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector<double> ys(N, 0.0);

        try {
            current_statement_begin__ = 14;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 15;
                stan::math::assign(get_base1_lhs(ys,i,"ys",1), (1 / (1 + exp(-(((beta_0 + (beta_1 * get_base1(xs_1,i,"xs_1",1))) + (beta_2 * get_base1(xs_2,i,"xs_2",1))))))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"ys[k0__]",ys[k0__],0);
            check_less_or_equal(function__,"ys[k0__]",ys[k0__],1);
        }

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(ys[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "lr_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_2";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ys" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_2";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ys" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef lr_model_namespace::lr_model stan_model;

